<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>DotNetExtras.Extended</name>
  </assembly>
  <members>
    <member name="T:DotNetExtras.Extended.DictionaryExtensions">
      <summary>
            Implements advanced extension methods for the <see cref="T:System.Collections.Generic.Dictionary`2" /> types.
            </summary>
    </member>
    <member name="M:DotNetExtras.Extended.DictionaryExtensions.ToDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})">
      <summary>
            Converts a string dictionary object to a dynamic object.
            </summary>
      <remarks>
            For non-dictionary objects,
            use the <see cref="M:DotNetExtras.Extended.ObjectExtensions.ToDynamic``1(``0,System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean)" /> method instead.
            </remarks>
      <param name="source">
            Dictionary object.
            </param>
      <returns>
            Expando object.
            </returns>
      <example>
        <code>
            Dictionary&lt;string, object?&gt; dictionary = new()
            {
                { "Key1", "Value1" },
                { "Key2", 123 },
                { "Key3", true }
            };
            
            dynamic result1 = dictionary.ToDynamic();
            </code>
      </example>
    </member>
    <member name="T:DotNetExtras.Extended.IListExtensions">
      <summary>
            Implements advanced extension methods for the <see cref="T:System.Collections.IList" /> types.
            </summary>
    </member>
    <member name="M:DotNetExtras.Extended.IListExtensions.RemoveMatching(System.Collections.IList,System.Object,System.Boolean)">
      <summary>
             Removes all items in the list that match the values of 
             the specified properties in the provided item.
             </summary>
      <param name="elements">
             List items.
             </param>
      <param name="elementToMatch">
             Item holding property values that will need to match for the list elements to be removed.
             </param>
      <param name="includeNonPublic">
             If <c>true</c>, non-public properties and fields will be checked along with the public properties and fields.
             </param>
      <returns>
             Number of removed elements.
             </returns>
      <example>
        <code><![CDATA[
             List<Sample> elements = new()
             {
                 new(){ Id = 100, ParentId = 1, Name = "Item1" },
                 new(){ Id = 200, ParentId = 2, Name = "Item2" },
                 new(){ Id = 300, ParentId = 2, Name = "Item3" },
                 new(){ Id = 400, ParentId = 3, Name = "Item4" }
             };
             
             Sample match = new() { ParentId = 2 };
            
             // Removes two items:
             int removedCount = elements.RemoveMatching(match);
             ]]></code>
      </example>
    </member>
    <member name="T:DotNetExtras.Extended.IntegerExtensions">
      <summary>
            Implements advanced extension methods for the integer types.
            </summary>
    </member>
    <member name="M:DotNetExtras.Extended.IntegerExtensions.ToHResult(System.Int32)">
      <summary>
            Converts negative integer value to properly formatted HResult value.
            </summary>
      <param name="hresult">
            HResult value.
            </param>
      <returns>
            Hex-formatted hresult value.
            </returns>
    </member>
    <member name="T:DotNetExtras.Extended.ObjectExtensions">
      <summary>
            Implements advanced extension methods for the <see cref="T:System.Object" /> types.
            </summary>
    </member>
    <member name="M:DotNetExtras.Extended.ObjectExtensions.ToDynamic``1(``0,System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean)">
      <summary>
             Converts any object to a dynamic object.
             </summary>
      <remarks>
             Adapted from
             <see href="https://stackoverflow.com/questions/42836936/convert-class-to-dynamic-and-add-propertyNames#answer-42837044" />.
             For dictionary objects, 
             use the <see cref="M:DotNetExtras.Extended.DictionaryExtensions.ToDynamic(System.Collections.Generic.Dictionary{System.String,System.Object})" /> method instead.
             </remarks>
      <typeparam name="T">
             Data type of the source object.
             </typeparam>
      <param name="source">
             The original object.
             </param>
      <param name="extras">
             Additional propertyNames to be added to the expando object.
             </param>
      <param name="publicOnly">
             If true, only public properties will be included.
             </param>
      <returns>
             Expando object.
             </returns>
      <example>
        <code>
             User user = new()
             {
                 Name = new()
                 {
                     GivenName = "John",
                     Surname = "Doe"
                 },
                 Age = 42,
                 Mail = "John.Doe@mail.com",
             };
            
             Dictionary&lt;string, object&gt; extras = new()
             {
                 { "ExtraProperty", "XYZ" }
             };
            
             dynamic? result = user.ToDynamic(extras);
             </code>
      </example>
    </member>
    <member name="M:DotNetExtras.Extended.ObjectExtensions.Clone``1(``0)">
      <summary>
            Returns a deep copy of a strongly typed object (does not require type casting).
            </summary>
      <typeparam name="T">
            Object type.
            </typeparam>
      <param name="original">
            Original object.
            </param>
      <returns>
            Cloned object.
            </returns>
      <remarks>
            Uses 
            <see href="https://github.com/force-net/DeepCloner" />
            (the only library that can handle copying all properties of the <c>Microsoft.Graph.Models.User</c>
            objects).
            </remarks>
      <example>
        <code>
            MyObject? cloneObject = originalObject.Clone();
            </code>
      </example>
    </member>
    <member name="M:DotNetExtras.Extended.ObjectExtensions.Clone(System.Object)">
      <inheritdoc cref="M:DotNetExtras.Extended.ObjectExtensions.Clone``1(``0)" path="param|returns|remarks" />
      <summary>
            Returns a deep copy of an object (requires type casting).
            </summary>
      <example>
        <code>
            MyObject? cloneObject = (MyObject?)originalObject.Clone();
            </code>
      </example>
    </member>
    <member name="T:DotNetExtras.Extended.StringExtensions">
      <summary>
            Implements advanced extension methods for the <see cref="T:System.String" /> types.
            </summary>
    </member>
    <member name="M:DotNetExtras.Extended.StringExtensions.ToType``1(System.String)">
      <summary>
            Converts a string value to the specified type.
            </summary>
      <typeparam name="T">
            Target data type.
            </typeparam>
      <param name="source">
            Original string value.
            </param>
      <returns>
            Converted value or default if conversion failed.
            </returns>
      <example>
        <code><![CDATA[
            bool b = "true".ToType<bool>();
            int n = "123".ToType<int>();
            DateTime dt = "2021-10-11T17:54:38".ToType<DateTime>();
            DateTimeOffset dto = "2021-10-11T17:54:38-03:30".ToType<DateTimeOffset>();
            ]]></code>
      </example>
    </member>
    <member name="M:DotNetExtras.Extended.StringExtensions.ToDateTime(System.String,System.String)">
      <summary>
            Converts a string to a <see cref="T:System.DateTime" /> value.
            </summary>
      <param name="source">
            Original value.
            </param>
      <param name="format">
            Optional explicit date/time format.
            </param>
      <returns>
            DateTime value.
            </returns>
      <example>
        <code>
            DateTime? dt1 = "2023-11-01T11:30:00+00:30".ToDateTime();
            DateTime? dt2 = "01/11/2023".ToDateTime("dd/MM/yyyy");
            DateTime? dt3 = "2023-11-01 12:30:00".ToDateTime("yyyy-MM-dd HH:mm:ss");
            </code>
      </example>
    </member>
    <member name="M:DotNetExtras.Extended.StringExtensions.ToDateTimeOffset(System.String,System.String)">
      <summary>
            Converts a string to a <see cref="T:System.DateTimeOffset" /> value.
            </summary>
      <param name="source">
            Original value.
            </param>
      <param name="format">
            Optional explicit date/time format.
            </param>
      <returns>
            DateTimeOffset value.
            </returns>
      <example>
        <code>
            DateTimeOffset? dto1 = "2023-11-01T11:30:00+00:30".ToDateTimeOffset();
            DateTimeOffset? dto2 = "2023-11-01T11:30:00+03:30".ToDateTimeOffset();
            DateTimeOffset? dto3 = "2023-12-01 16:30:00 +00:00".ToDateTimeOffset("yyyy-MM-dd HH:mm:ss zzz");
            </code>
      </example>
    </member>
    <member name="M:DotNetExtras.Extended.StringExtensions.ToDate(System.String,System.String)">
      <summary>
            Converts a string to a <see cref="T:System.DateOnly" /> value.
            </summary>
      <param name="source">
            Original value.
            </param>
      <param name="format">
            Optional explicit date format.
            </param>
      <returns>
            DateTime value.
            </returns>
      <example>
        <code>
            DateOnly? d1 = "2023-11-01".ToDateOnly();
            DateOnly? d2 = "01/11/2023".ToDateOnly("dd/MM/yyyy");
            </code>
      </example>
    </member>
    <member name="M:DotNetExtras.Extended.StringExtensions.ToTime(System.String,System.String)">
      <summary>
            Converts a string to a <see cref="T:System.TimeOnly" /> value.
            </summary>
      <param name="source">
            Original value.
            </param>
      <param name="format">
            Optional explicit time format.
            </param>
      <returns>
            DateTime value.
            </returns>
      <example>
        <code>
            TimeOnly? t1 = "23:11:01".ToTimeOnly();
            TimeOnly? t2 = "11:35:48 PM".ToTimeOnly("hh:mm:ss tt");
            </code>
      </example>
    </member>
    <member name="M:DotNetExtras.Extended.StringExtensions.ToList``1(System.String,System.String)">
      <summary>
            Converts string to a list.
            </summary>
      <typeparam name="T">
            Data type of the list elements.
            </typeparam>
      <param name="source">
            String value.
            </param>
      <param name="delimiter">
            List item delimiter string.
            </param>
      <returns>
            Generic list.
            </returns>
      <example>
        <code><![CDATA[
            // Will hold: value1, value2, value3
            List<string> result = "value1|value2|value3".ToList<string>();
            ]]></code>
      </example>
    </member>
    <member name="M:DotNetExtras.Extended.StringExtensions.ToArray``1(System.String,System.String,System.StringSplitOptions)">
      <summary>
            Converts string to array.
            </summary>
      <typeparam name="T">
            Data type of the array elements.
            </typeparam>
      <param name="source">
            String value.
            </param>
      <param name="delimiter">
            Array item delimiter string.
            </param>
      <param name="options">
            String splitting options.
            </param>
      <returns>
            Generic array.
            </returns>
      <example>
        <code><![CDATA[
            // Will hold: value1, value2, value3
            string[] result = "value1|value2|value3".ToArray<string>(); 
            ]]></code>
      </example>
    </member>
    <member name="M:DotNetExtras.Extended.StringExtensions.ToDictionary``2(System.String,System.String,System.String,System.StringSplitOptions,System.StringSplitOptions)">
      <summary>
            Converts string to a dictionary.
            </summary>
      <typeparam name="TKey">
            Data type of the dictionary key elements.
            </typeparam>
      <typeparam name="TValue">
            Data type of the dictionary value elements.
            </typeparam>
      <param name="source">
            String value.
            </param>
      <param name="delimiter">
            List item delimiter string.
            </param>
      <param name="keyValueSeparator">
            Name value delimiter string.
            </param>
      <param name="optionsPairs">
            Options for splitting pairs.
            </param>
      <param name="optionsKeyValue">
            Options for splitting key from value.
            </param>
      <returns>
            Generic dictionary.
            </returns>
      <example>
        <code><![CDATA[
            // Will hold: key1=value1, key2=value2
            Dictionary<string,string> result = "key1=value1|key2=value2".ToDictionary<string, string>();
            ]]></code>
      </example>
    </member>
    <member name="M:DotNetExtras.Extended.StringExtensions.ToHashSet``1(System.String,System.String,System.StringSplitOptions)">
      <summary>
            Converts string to a hash set.
            </summary>
      <typeparam name="T">
            Data type of the hash set elements.
            </typeparam>
      <param name="source">
            Input string.
            </param>
      <param name="delimiter">
            Delimiter character.
            </param>
      <param name="options">
            String splitting options.
            </param>
      <returns>
            Generic hash set.
            </returns>
      <example>
        <code><![CDATA[
            // Will hold: [1, 2, 3]
            HashSet<int>? hashSet = "1|2|3".ToHashSet();
            
            // Will hold: ["one", "two", "three"]
            HashSet<string>? hashSet = "one,two,three".ToHashSet(",");
            ]]></code>
      </example>
    </member>
    <member name="M:DotNetExtras.Extended.StringExtensions.IsJson(System.String)">
      <summary>
            Checks if the string contains valid JSON text.
            </summary>
      <param name="source">
            String to test.
            </param>
      <returns>
        <c>true</c> if the string contains a valid JSON string; otherwise, <c>false</c>.
            </returns>
      <example>
        <code><![CDATA[
            bool isJson;
            
            isJson = "{\"key1\": \"value1\", \"key2\": \"value2\"}".IsJson(); // true
            isJson = "[{\"key1\": \"value1\"}, {\"key2\": \"value2\", \"key3\": 123}]".IsJson(); // true
            ]]></code>
      </example>
    </member>
    <member name="M:DotNetExtras.Extended.StringExtensions.IsHtml(System.String)">
      <summary>
            Checks if the string contains a valid HTML document.
            </summary>
      <remarks>
            This function does not validate the entire HTML document,
            nor does it check HTML tags.
            It expects a valid HTML document to start with either 
            `&lt;!DOCTYPE html&gt;` or `&lt;html&gt;` 
            (ignoring white space).
            </remarks>
      <param name="source">
            String to test.
            </param>
      <returns>
        <c>true</c> if the string contains a valid HTML document; otherwise, <c>false</c>.
            </returns>
      <example>
        <code><![CDATA[
            bool isHtml;
            isHtml = "<!DOCTYPE html>hello</html>".IsHtml(); // true
            isHtml = "<html>hello</html>".IsHtml(); // true
            ]]></code>
      </example>
    </member>
    <member name="M:DotNetExtras.Extended.StringExtensions.EscapeLdapValue(System.String)">
      <summary>
            Escapes special LDAP characters.
            </summary>
      <param name="input">
            String value.
            </param>
      <returns>
            Escaped value.
            </returns>
    </member>
    <member name="N:DotNetExtras.Extended">
      <summary>Provides general-purpose extension methods for common data types.</summary>
    </member>
  </members>
</doc>